"""
MPStats Analyzer - –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∏—à –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö MPStats

–ê–≤—Ç–æ—Ä: MPStats Analyzer Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import streamlit as st

# –í–ê–ñ–ù–û: st.set_page_config() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit
st.set_page_config(
    page_title="MPStats Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/mpstats-analyzer/help',
        'Report a bug': 'https://github.com/mpstats-analyzer/issues',
        'About': "MPStats Analyzer v1.0.0"
    }
)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from components.sidebar import Sidebar
    from components.file_uploader import FileUploader  
    from components.metrics_dashboard import MetricsDashboard
    
    from core.file_processor import FileProcessor
    from core.data_validator import DataValidator
    from core.scoring_engine import ScoringEngine
    
    from analyzers.trend_analyzer import TrendAnalyzer
    from analyzers.query_analyzer import QueryAnalyzer
    from analyzers.price_analyzer import PriceAnalyzer
    from analyzers.stock_analyzer import StockAnalyzer
    from analyzers.ads_analyzer import AdsAnalyzer
    
    from utils.formatters import ReportFormatter
    from utils.constants import VERSION_INFO
    from config import APP_TITLE, APP_ICON
    
    IMPORTS_SUCCESSFUL = True
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    IMPORTS_SUCCESSFUL = False
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    APP_TITLE = "MPStats Analyzer"
    APP_ICON = "üìä"
    VERSION_INFO = {"version": "1.0.0"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def init_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    if not IMPORTS_SUCCESSFUL:
        return None
        
    return {
        'sidebar': Sidebar(),
        'file_uploader': FileUploader(),
        'metrics_dashboard': MetricsDashboard(),
        'scoring_engine': ScoringEngine(),
        'report_formatter': ReportFormatter()
    }

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'loaded_data' not in st.session_state:
        st.session_state.loaded_data = {}
    
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = {}
    
    if 'scoring_results' not in st.session_state:
        st.session_state.scoring_results = {}
    
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"
    
    if 'force_upload_page' not in st.session_state:
        st.session_state.force_upload_page = False

def run_analysis(loaded_data: Dict) -> Dict:
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    analysis_results = {}
    components = init_components()
    
    with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if 'trends' in loaded_data:
            try:
                trend_analyzer = TrendAnalyzer(loaded_data['trends'])
                
                analysis_results['trends'] = {
                    'peak_months_by_year': trend_analyzer.get_peak_months_analysis()['peak_months_by_year'],
                    'yoy_changes': trend_analyzer.get_yoy_dynamics_analysis()['metrics_analysis'],
                    'summary': trend_analyzer.get_summary_metrics(),
                    'charts': trend_analyzer.create_trends_charts()
                }
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
        if 'queries' in loaded_data:
            try:
                query_analyzer = QueryAnalyzer(loaded_data['queries'])
                
                efficiency_analysis = query_analyzer.get_efficiency_analysis()
                analysis_results['queries'] = {
                    'total_queries': efficiency_analysis['total_queries'],
                    'effective_queries': efficiency_analysis['effective_queries']['count'],
                    'efficiency_ratio': efficiency_analysis['effective_queries']['percentage'],
                    'top_opportunities': efficiency_analysis['top_opportunities'],
                    'summary': query_analyzer.get_summary_metrics(),
                    'charts': query_analyzer.create_queries_charts()
                }
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        if 'price' in loaded_data:
            try:
                price_analyzer = PriceAnalyzer(loaded_data['price'])
                
                segment_analysis = price_analyzer.get_segment_analysis()
                analysis_results['price'] = {
                    'best_segment': segment_analysis['best_segment'],
                    'segment_comparison': segment_analysis['segment_comparison'],
                    'summary': price_analyzer.get_summary_metrics(),
                    'charts': price_analyzer.create_price_charts()
                }
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω: {str(e)}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
        if 'days' in loaded_data:
            try:
                stock_analyzer = StockAnalyzer(loaded_data['days'])
                
                seasonal_analysis = stock_analyzer.get_seasonal_analysis()
                analysis_results['stock'] = {
                    'peak_stock_months': seasonal_analysis['peak_stock_months'],
                    'seasonal_patterns': seasonal_analysis['monthly_patterns'],
                    'summary': stock_analyzer.get_summary_metrics(),
                    'charts': stock_analyzer.create_stock_charts()
                }
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {str(e)}")
        
        # –†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if 'products' in loaded_data:
            try:
                ads_analyzer = AdsAnalyzer(loaded_data['products'])
                
                top_segments = ads_analyzer.get_top_segments_analysis()
                analysis_results['ads'] = {
                    'top_10_analysis': top_segments['top_10_analysis'],
                    'top_100_analysis': top_segments['top_100_analysis'],
                    'niche_assessment': top_segments['niche_assessment'],
                    'summary': ads_analyzer.get_summary_metrics(),
                    'charts': ads_analyzer.create_ads_charts()
                }
                st.success("‚úÖ –†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    return analysis_results

def calculate_scoring(loaded_data: Dict) -> Dict:
    """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞"""
    
    components = init_components()
    scoring_engine = components['scoring_engine']
    
    with st.spinner("üèÜ –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞..."):
        try:
            scoring_results = scoring_engine.calculate_total_score(loaded_data)
            st.success("‚úÖ –°–∫–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
            return scoring_results
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–∫–æ—Ä–∏–Ω–≥–∞: {str(e)}")
            return {}

def render_main_dashboard():
    """–†–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    if not IMPORTS_SUCCESSFUL:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        return
    
    components = init_components()
    
    st.markdown('<h1 class="main-header">üìä MPStats Analyzer</h1>', unsafe_allow_html=True)
    st.markdown("### –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∏—à –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not st.session_state.loaded_data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
        st.markdown("---")
        st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        uploaded_files = components['file_uploader'].render()
        
        if uploaded_files and st.session_state.loaded_data:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            st.markdown("---")
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
                with st.spinner("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    analysis_results = run_analysis(st.session_state.loaded_data)
                    st.session_state.analysis_results = analysis_results
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–∏–Ω–≥
                    scoring_results = calculate_scoring(st.session_state.loaded_data)
                    st.session_state.scoring_results = scoring_results
                    
                    if scoring_results:
                        st.success("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                        st.rerun()
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if st.session_state.scoring_results:
            components['metrics_dashboard'].render_main_dashboard(
                st.session_state.scoring_results,
                st.session_state.analysis_results
            )
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ —Å–∫–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
            if st.button("üèÜ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–∏–Ω–≥", type="primary"):
                scoring_results = calculate_scoring(st.session_state.loaded_data)
                st.session_state.scoring_results = scoring_results
                
                if not st.session_state.analysis_results:
                    analysis_results = run_analysis(st.session_state.loaded_data)
                    st.session_state.analysis_results = analysis_results
                
                st.rerun()

def render_trends_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"""
    
    st.header("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
    
    if 'trends' not in st.session_state.loaded_data:
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    try:
        trend_analyzer = TrendAnalyzer(st.session_state.loaded_data['trends'])
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if st.session_state.scoring_results:
            trend_score = st.session_state.scoring_results.get('trend_score', 0)
            components = init_components()
            components['metrics_dashboard'].render_module_metrics("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", {}, trend_score)
        
        # –ü–∏–∫–æ–≤—ã–µ –º–µ—Å—è—Ü—ã
        st.subheader("üî• –ü–∏–∫–æ–≤—ã–µ –º–µ—Å—è—Ü—ã –ø—Ä–æ–¥–∞–∂")
        peak_analysis = trend_analyzer.get_peak_months_analysis()
        
        if peak_analysis['peak_months_by_year']:
            peak_df = pd.DataFrame([
                {
                    '–ì–æ–¥': year,
                    '–ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü': data['month_name'],
                    '–ü—Ä–æ–¥–∞–∂–∏': f"{data['sales']:,}",
                    '–í—ã—Ä—É—á–∫–∞': f"{data['revenue']:,.0f} ‚ÇΩ"
                }
                for year, data in peak_analysis['peak_months_by_year'].items()
            ])
            st.dataframe(peak_df, use_container_width=True)
        
        # YoY –¥–∏–Ω–∞–º–∏–∫–∞
        st.subheader("üìä –î–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥ –∫ –≥–æ–¥—É")
        yoy_analysis = trend_analyzer.get_yoy_dynamics_analysis()
        
        if yoy_analysis['metrics_analysis']:
            for metric_key, metric_data in yoy_analysis['metrics_analysis'].items():
                if 'error' not in metric_data:
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            metric_data['display_name'],
                            f"{metric_data['avg_yoy_change']:+.1f}%",
                            delta=metric_data['overall_trend']
                        )
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤")
        charts = trend_analyzer.create_trends_charts()
        
        for chart_name, chart in charts.items():
            st.plotly_chart(chart, use_container_width=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if peak_analysis['recommendations']:
            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for rec in peak_analysis['recommendations']:
                st.info(rec)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")

def render_queries_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    st.header("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    if 'queries' not in st.session_state.loaded_data:
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    try:
        query_analyzer = QueryAnalyzer(st.session_state.loaded_data['queries'])
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if st.session_state.scoring_results:
            query_score = st.session_state.scoring_results.get('query_score', 0)
            components = init_components()
            
            summary = query_analyzer.get_summary_metrics()
            components['metrics_dashboard'].render_module_metrics("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤", summary, query_score)
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        st.subheader("‚ö° –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        efficiency_analysis = query_analyzer.get_efficiency_analysis()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", f"{efficiency_analysis['total_queries']:,}")
        
        with col2:
            st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö", f"{efficiency_analysis['effective_queries']['count']:,}")
        
        with col3:
            st.metric("% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", f"{efficiency_analysis['effective_queries']['percentage']:.1f}%")
        
        with col4:
            st.metric("–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞", f"{efficiency_analysis['effective_queries']['avg_frequency']:,.0f}")
        
        # –¢–æ–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        st.subheader("üéØ –¢–æ–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è")
        if efficiency_analysis['top_opportunities']:
            opportunities_df = pd.DataFrame(efficiency_analysis['top_opportunities'])
            st.dataframe(opportunities_df, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
        charts = query_analyzer.create_queries_charts()
        
        for chart_name, chart in charts.items():
            st.plotly_chart(chart, use_container_width=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if efficiency_analysis['recommendations']:
            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for rec in efficiency_analysis['recommendations']:
                st.info(rec)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}")

def render_ads_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    st.header("üéØ –†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    if 'products' not in st.session_state.loaded_data:
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    try:
        ads_analyzer = AdsAnalyzer(st.session_state.loaded_data['products'])
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if st.session_state.scoring_results:
            ads_score = st.session_state.scoring_results.get('ads_score', 0)
            components = init_components()
            
            summary = ads_analyzer.get_summary_metrics()
            components['metrics_dashboard'].render_module_metrics("–†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑", summary, ads_score)
        
        # –ê–Ω–∞–ª–∏–∑ –¢–û–ü —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        st.subheader("üèÜ –ê–Ω–∞–ª–∏–∑ –¢–û–ü-10 –∏ –¢–û–ü-100")
        top_analysis = ads_analyzer.get_top_segments_analysis()
        
        if 'top_10_analysis' in top_analysis and 'top_100_analysis' in top_analysis:
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**–¢–û–ü-10 —Ç–æ–≤–∞—Ä—ã**")
                top10 = top_analysis['top_10_analysis']
                st.metric("–¢–æ–≤–∞—Ä–æ–≤", top10['products_count'])
                st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞", f"{top10['avg_cpm']:.0f} ‚ÇΩ")
                st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{top10['avg_price']:.0f} ‚ÇΩ")
                st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ß–µ–∫/–°—Ç–∞–≤–∫–∞", f"{top10['avg_ratio']:.1f}")
            
            with col2:
                st.markdown("**–¢–û–ü-100 —Ç–æ–≤–∞—Ä—ã**")
                top100 = top_analysis['top_100_analysis']
                st.metric("–¢–æ–≤–∞—Ä–æ–≤", top100['products_count'])
                st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞", f"{top100['avg_cpm']:.0f} ‚ÇΩ")
                st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{top100['avg_price']:.0f} ‚ÇΩ")
                st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ß–µ–∫/–°—Ç–∞–≤–∫–∞", f"{top100['avg_ratio']:.1f}")
        
        # –û—Ü–µ–Ω–∫–∞ –Ω–∏—à–∏
        if 'niche_assessment' in top_analysis:
            assessment = top_analysis['niche_assessment']
            
            st.subheader("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏—à–∏")
            
            status = assessment.get('niche_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            heat_level = assessment.get('heat_level', 3)
            
            if heat_level <= 2:
                st.success(f"üü¢ {status} (—É—Ä–æ–≤–µ–Ω—å {heat_level}/5)")
            elif heat_level == 3:
                st.warning(f"üü° {status} (—É—Ä–æ–≤–µ–Ω—å {heat_level}/5)")
            else:
                st.error(f"üî¥ {status} (—É—Ä–æ–≤–µ–Ω—å {heat_level}/5)")
            
            # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            reasoning = assessment.get('reasoning', [])
            for reason in reasoning:
                st.info(f"‚Ä¢ {reason}")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        charts = ads_analyzer.create_ads_charts()
        
        for chart_name, chart in charts.items():
            st.plotly_chart(chart, use_container_width=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'recommendations' in top_analysis:
            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for rec in top_analysis['recommendations']:
                st.info(rec)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

def render_scoring_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞"""
    
    st.header("üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥ –Ω–∏—à–∏")
    
    if not st.session_state.scoring_results:
        st.warning("‚ö†Ô∏è –°–∫–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")
        
        if st.session_state.loaded_data:
            if st.button("üèÜ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–∏–Ω–≥", type="primary"):
                scoring_results = calculate_scoring(st.session_state.loaded_data)
                st.session_state.scoring_results = scoring_results
                st.rerun()
        return
    
    components = init_components()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥
    components['metrics_dashboard'].render_main_dashboard(
        st.session_state.scoring_results,
        st.session_state.analysis_results
    )
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.markdown("---")
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    detailed_analysis = st.session_state.scoring_results.get('detailed_analysis', {})
    
    for module_name, module_data in detailed_analysis.items():
        with st.expander(f"üìä {module_name.title()}"):
            
            if isinstance(module_data, dict):
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥—É–ª—è
                if 'total_score' in module_data:
                    st.metric("–ë–∞–ª–ª –º–æ–¥—É–ª—è", f"{module_data['total_score']}/4")
                
                # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                for key, value in module_data.items():
                    if key not in ['total_score', 'error']:
                        if isinstance(value, dict):
                            st.json(value)
                        else:
                            st.write(f"**{key}:** {value}")
                
                # –û—à–∏–±–∫–∏
                if 'error' in module_data:
                    st.error(f"–û—à–∏–±–∫–∞: {module_data['error']}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
    st.markdown("---")
    st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç", use_container_width=True):
            try:
                report_formatter = components['report_formatter']
                filename = report_formatter.export_to_excel(
                    st.session_state.scoring_results,
                    st.session_state.analysis_results
                )
                st.success(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    
    with col2:
        if st.button("üìÑ –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç", use_container_width=True):
            try:
                report_formatter = components['report_formatter']
                report_text = report_formatter.create_detailed_report(
                    st.session_state.scoring_results,
                    st.session_state.analysis_results
                )
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                    data=report_text,
                    file_name=f"mpstats_report_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.md",
                    mime="text/markdown"
                )
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

def render_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    components = init_components()
    components['sidebar'].render_settings_panel()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initialize_session_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ
    if st.session_state.get('force_upload_page', False):
        selected_page = "–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"  # –ü–æ–∫–∞–∂–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        st.session_state.force_upload_page = False
    else:
        components = init_components()
        if components:
            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
            selected_page = components['sidebar'].render()
            st.session_state.current_page = selected_page
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            return
    
    # –†–æ—É—Ç–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü
    if selected_page == "–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥":
        render_main_dashboard()
    
    elif selected_page == "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤":
        render_trends_page()
    
    elif selected_page == "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤":
        render_queries_page()
    
    elif selected_page == "–¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è":
        if 'price' not in st.session_state.loaded_data:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ü–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            st.header("üí∞ –¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
            st.info("–ú–æ–¥—É–ª—å —Ü–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    elif selected_page == "–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤":
        if 'days' not in st.session_state.loaded_data:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            st.header("üì¶ –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
            st.info("–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    elif selected_page == "–†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        render_ads_page()
    
    elif selected_page == "–ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥":
        render_scoring_page()
    
    elif selected_page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        render_settings_page()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(f"""
    <div style="text-align: center; color: #666; font-size: 0.8rem;">
        MPStats Analyzer v{VERSION_INFO['version'] if IMPORTS_SUCCESSFUL else '1.0.0'} | 
        Made with ‚ù§Ô∏è for marketplace analytics
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
