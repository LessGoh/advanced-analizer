import streamlit as st
import pandas as pd
from typing import Dict, Any
from datetime import datetime


class ReportGenerator:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        pass
    
    def generate_summary_report(self, scoring_results: Dict, analysis_results: Dict = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        total_score = scoring_results.get('total_score', 0)
        niche_rating = scoring_results.get('niche_rating', 'poor')
        
        report = f"""
# üìä –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—à–∏ MPStats

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- **–û–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥:** {total_score}/20 –±–∞–ª–ª–æ–≤
- **–†–µ–π—Ç–∏–Ω–≥ –Ω–∏—à–∏:** {niche_rating.title()}

## üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥
- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: {scoring_results.get('trend_score', 0)}/4
- –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤: {scoring_results.get('query_score', 0)}/4
- –¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {scoring_results.get('price_score', 0)}/4
- –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: {scoring_results.get('stock_score', 0)}/4
- –†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {scoring_results.get('ads_score', 0)}/4

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""
        
        recommendations = scoring_results.get('recommendations', [])
        for i, rec in enumerate(recommendations, 1):
            report += f"{i}. {rec}\n"
        
        return report
    
    def render_export_controls(self, scoring_results: Dict, analysis_results: Dict = None):
        """–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–º"""
        
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìÑ –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç", use_container_width=True):
                report_text = self.generate_summary_report(scoring_results, analysis_results)
                
                st.download_button(
                    label="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
                    data=report_text,
                    file_name=f"mpstats_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                    mime="text/markdown"
                )
        
        with col2:
            if st.button("üìä –°–æ–∑–¥–∞—Ç—å Excel –æ—Ç—á–µ—Ç", use_container_width=True):
                try:
                    excel_data = self.create_excel_report(scoring_results, analysis_results)
                    st.success("‚úÖ Excel –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
    
    def create_excel_report(self, scoring_results: Dict, analysis_results: Dict = None) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞"""
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        summary_data = {
            '–ú–µ—Ç—Ä–∏–∫–∞': [
                '–û–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥',
                '–†–µ–π—Ç–∏–Ω–≥ –Ω–∏—à–∏',
                '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤',
                '–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤',
                '–¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è',
                '–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤',
                '–†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
            ],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                f"{scoring_results.get('total_score', 0)}/20",
                scoring_results.get('niche_rating', 'poor').title(),
                f"{scoring_results.get('trend_score', 0)}/4",
                f"{scoring_results.get('query_score', 0)}/4",
                f"{scoring_results.get('price_score', 0)}/4",
                f"{scoring_results.get('stock_score', 0)}/4",
                f"{scoring_results.get('ads_score', 0)}/4"
            ]
        }
        
        df = pd.DataFrame(summary_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ bytes –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return df.to_excel(index=False)
    
    def render_detailed_results(self, analysis_results: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        if not analysis_results:
            st.info("–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        for module_name, module_data in analysis_results.items():
            with st.expander(f"üìä {module_name.title()}"):
                
                if isinstance(module_data, dict):
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    if 'summary' in module_data:
                        summary = module_data['summary']
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫
                        metrics_data = []
                        for key, value in summary.items():
                            metrics_data.append({
                                '–ú–µ—Ç—Ä–∏–∫–∞': key.replace('_', ' ').title(),
                                '–ó–Ω–∞—á–µ–Ω–∏–µ': str(value)
                            })
                        
                        if metrics_data:
                            st.dataframe(pd.DataFrame(metrics_data), use_container_width=True)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
                    for key, value in module_data.items():
                        if key not in ['summary', 'charts'] and not key.startswith('_'):
                            st.write(f"**{key.replace('_', ' ').title()}:** {value}")
                
                else:
                    st.write(str(module_data))
