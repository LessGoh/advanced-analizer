import streamlit as st
from streamlit_option_menu import option_menu
from typing import Dict, List, Optional
import pandas as pd


class Sidebar:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.menu_options = [
            {"name": "–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥", "icon": "house"},
            {"name": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", "icon": "graph-up"},
            {"name": "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤", "icon": "search"},
            {"name": "–¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è", "icon": "currency-dollar"},
            {"name": "–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤", "icon": "boxes"},
            {"name": "–†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "icon": "bullseye"},
            {"name": "–ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥", "icon": "award"},
            {"name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "icon": "gear"}
        ]
    
    def render(self) -> str:
        """–†–µ–Ω–¥–µ—Ä –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é"""
        
        with st.sidebar:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            st.markdown("""
                <div style="text-align: center; padding: 1rem 0;">
                    <h1 style="color: #1f77b4; margin: 0;">üìä MPStats</h1>
                    <h3 style="color: #666; margin: 0;">Analyzer</h3>
                    <p style="color: #888; font-size: 0.9rem;">–ê–Ω–∞–ª–∏–∑ –Ω–∏—à –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞</p>
                </div>
            """, unsafe_allow_html=True)
            
            st.markdown("---")
            
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            selected = option_menu(
                menu_title="–ù–∞–≤–∏–≥–∞—Ü–∏—è",
                options=[option["name"] for option in self.menu_options],
                icons=[option["icon"] for option in self.menu_options],
                menu_icon="list",
                default_index=0,
                orientation="vertical",
                styles={
                    "container": {"padding": "0!important", "background-color": "#fafafa"},
                    "icon": {"color": "#1f77b4", "font-size": "16px"},
                    "nav-link": {
                        "font-size": "14px",
                        "text-align": "left",
                        "margin": "0px",
                        "--hover-color": "#eee",
                        "padding": "0.5rem 0.75rem"
                    },
                    "nav-link-selected": {"background-color": "#1f77b4"},
                }
            )
            
            st.markdown("---")
            
            # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self._render_file_status()
            
            st.markdown("---")
            
            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            self._render_quick_actions()
            
            st.markdown("---")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
            st.markdown("""
                <div style="text-align: center; padding: 1rem 0; color: #888; font-size: 0.8rem;">
                    MPStats Analyzer v1.0<br>
                    ¬© 2024 Analysis Tool
                </div>
            """, unsafe_allow_html=True)
        
        return selected
    
    def _render_file_status(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        st.subheader("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ session_state
        if 'loaded_data' not in st.session_state or not st.session_state.loaded_data:
            st.info("–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            if st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", use_container_width=True):
                st.switch_page("–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥")
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        file_types = {
            "trends": {"name": "–¢—Ä–µ–Ω–¥—ã", "icon": "üìà"},
            "queries": {"name": "–ó–∞–ø—Ä–æ—Å—ã", "icon": "üîç"},
            "price": {"name": "–¶–µ–Ω—ã", "icon": "üí∞"},
            "days": {"name": "–ü–æ –¥–Ω—è–º", "icon": "üìÖ"},
            "products": {"name": "–¢–æ–≤–∞—Ä—ã", "icon": "üì¶"}
        }
        
        for file_type, info in file_types.items():
            if file_type in st.session_state.loaded_data:
                data = st.session_state.loaded_data[file_type]
                st.success(f"{info['icon']} {info['name']} ({len(data)} –∑–∞–ø–∏—Å–µ–π)")
            else:
                st.error(f"{info['icon']} {info['name']} - –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    def _render_quick_actions(self):
        """–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True):
            # –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if 'analysis_results' in st.session_state:
                del st.session_state.analysis_results
            if 'scoring_results' in st.session_state:
                del st.session_state.scoring_results
            st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", use_container_width=True, disabled=('scoring_results' not in st.session_state)):
            st.session_state.show_export_modal = True
            st.rerun()
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            self._clear_all_data()
            st.rerun()
    
    def _clear_all_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ session_state"""
        keys_to_clear = [
            'loaded_data', 
            'file_info', 
            'analysis_results', 
            'scoring_results',
            'validation_results'
        ]
        
        for key in keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
        
        st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    def render_settings_panel(self):
        """–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")"""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–∏–Ω–≥–∞
        st.subheader("üèÜ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–∏–Ω–≥–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤ (YoY %)**")
            trend_excellent = st.number_input("–û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç (‚â•)", value=10.0, step=1.0, key="trend_excellent")
            trend_good = st.number_input("–•–æ—Ä–æ—à–∏–π —Ä–æ—Å—Ç (‚â•)", value=0.0, step=1.0, key="trend_good")
            trend_stable = st.number_input("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (‚â•)", value=-5.0, step=1.0, key="trend_stable")
        
        with col2:
            st.markdown("**–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤**")
            query_excellent = st.number_input("–û—Ç–ª–∏—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (‚â•)", value=5.0, step=0.5, key="query_excellent")
            query_good = st.number_input("–•–æ—Ä–æ—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (‚â•)", value=3.0, step=0.5, key="query_good")
            query_average = st.number_input("–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (‚â•)", value=2.0, step=0.5, key="query_average")
        
        st.markdown("**–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (–ß–µ–∫/–°—Ç–∞–≤–∫–∞)**")
        col3, col4 = st.columns(2)
        
        with col3:
            ads_excellent = st.number_input("–û—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω–∞—è –Ω–∏—à–∞ (‚â•)", value=4.0, step=0.5, key="ads_excellent")
            ads_good = st.number_input("–•–æ—Ä–æ—à–∞—è –Ω–∏—à–∞ (‚â•)", value=3.0, step=0.5, key="ads_good")
        
        with col4:
            ads_average = st.number_input("–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è (‚â•)", value=2.0, step=0.5, key="ads_average")
            ads_poor = st.number_input("–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è (‚â•)", value=1.0, step=0.5, key="ads_poor")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        col_reset, col_save = st.columns(2)
        
        with col_reset:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", use_container_width=True):
                self._reset_settings()
                st.rerun()
        
        with col_save:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
                self._save_settings({
                    'trend_excellent': trend_excellent,
                    'trend_good': trend_good,
                    'trend_stable': trend_stable,
                    'query_excellent': query_excellent,
                    'query_good': query_good,
                    'query_average': query_average,
                    'ads_excellent': ads_excellent,
                    'ads_good': ads_good,
                    'ads_average': ads_average,
                    'ads_poor': ads_poor
                })
                st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        col5, col6 = st.columns(2)
        
        with col5:
            show_charts = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True, key="show_charts")
            show_recommendations = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", value=True, key="show_recommendations")
        
        with col6:
            chart_height = st.selectbox("–í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤", options=[300, 400, 500, 600], index=1, key="chart_height")
            decimal_places = st.selectbox("–ó–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π", options=[0, 1, 2, 3], index=2, key="decimal_places")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        if 'loaded_data' in st.session_state and st.session_state.loaded_data:
            for data_type, data in st.session_state.loaded_data.items():
                with st.expander(f"üìÅ {data_type.title()} ({len(data)} –∑–∞–ø–∏—Å–µ–π)"):
                    st.write("**–ö–æ–ª–æ–Ω–∫–∏:**")
                    st.write(", ".join(data.columns.tolist()))
                    
                    if len(data) > 0:
                        st.write("**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:**")
                        date_columns = [col for col in data.columns if '–¥–∞—Ç–∞' in col.lower() or '–º–µ—Å—è—Ü' in col.lower()]
                        if date_columns:
                            date_col = date_columns[0]
                            try:
                                min_date = pd.to_datetime(data[date_col]).min()
                                max_date = pd.to_datetime(data[date_col]).max()
                                st.write(f"–° {min_date.strftime('%Y-%m-%d')} –ø–æ {max_date.strftime('%Y-%m-%d')}")
                            except:
                                st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥")
                        
                        st.write("**–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:**")
                        st.dataframe(data.head(3), use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    def _reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_settings = {
            'trend_excellent': 10.0,
            'trend_good': 0.0,
            'trend_stable': -5.0,
            'query_excellent': 5.0,
            'query_good': 3.0,
            'query_average': 2.0,
            'ads_excellent': 4.0,
            'ads_good': 3.0,
            'ads_average': 2.0,
            'ads_poor': 1.0,
            'show_charts': True,
            'show_recommendations': True,
            'chart_height': 400,
            'decimal_places': 2
        }
        
        for key, value in default_settings.items():
            st.session_state[key] = value
    
    def _save_settings(self, settings: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state"""
        st.session_state.user_settings = settings
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if 'config_override' not in st.session_state:
            st.session_state.config_override = {}
        
        st.session_state.config_override.update(settings)
    
    def get_current_settings(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if 'user_settings' in st.session_state:
            return st.session_state.user_settings
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'trend_excellent': 10.0,
                'trend_good': 0.0,
                'trend_stable': -5.0,
                'query_excellent': 5.0,
                'query_good': 3.0,
                'query_average': 2.0,
                'ads_excellent': 4.0,
                'ads_good': 3.0,
                'ads_average': 2.0,
                'ads_poor': 1.0,
                'show_charts': True,
                'show_recommendations': True,
                'chart_height': 400,
                'decimal_places': 2
            }
    
    def render_file_upload_section(self):
        """–°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞)"""
        st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ MPStats")
        
        st.markdown("""
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤:**
        - üìà **–û—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–¥–∞–º** (.xlsx) - –¥–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º
        - üîç **–û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º** (.xlsx) - –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
        - üí∞ **–¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** (.xlsx) - –∞–Ω–∞–ª–∏–∑ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
        - üìÖ **–û—Ç—á–µ—Ç –ø–æ –¥–Ω—è–º** (.xlsx) - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
        - üì¶ **–û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º** (.csv) - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
        """)
        
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤",
            type=['xlsx', 'csv'],
            accept_multiple_files=True,
            help="–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        )
        
        if uploaded_files:
            return uploaded_files
        
        return None
    
    def show_upload_tips(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤"""
        with st.expander("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤"):
            st.markdown("""
            **–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:**
            
            1. **–ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤** –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
               - `—Ç—Ä–µ–Ω–¥` –∏–ª–∏ `trend` - –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
               - `–∑–∞–ø—Ä–æ—Å` –∏–ª–∏ `queries` - –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
               - `—Ü–µ–Ω–æ–≤` –∏–ª–∏ `price` - –¥–ª—è —Ü–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
               - `–¥–Ω—è–º` –∏–ª–∏ `days` - –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–Ω—è–º
               - `.csv` - –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            
            2. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö** –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É MPStats
            
            3. **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å** –≤—Å–µ 5 —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            
            4. **–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö** - –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 3 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            """)
    
    def render_progress_indicator(self, current_step: str, total_steps: int = 5):
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        steps = [
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", 
            "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤",
            "–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞",
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
        ]
        
        current_index = steps.index(current_step) if current_step in steps else 0
        progress = (current_index + 1) / len(steps)
        
        st.progress(progress)
        st.caption(f"–®–∞–≥ {current_index + 1}/{len(steps)}: {current_step}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        for i, step in enumerate(steps):
            if i < current_index:
                st.success(f"‚úÖ {step}")
            elif i == current_index:
                st.info(f"üîÑ {step}")
            else:
                st.text(f"‚è≥ {step}")
    
    def render_export_modal(self):
        """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if 'show_export_modal' not in st.session_state:
            return
        
        if st.session_state.show_export_modal:
            st.subheader("üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
            
            col1, col2 = st.columns(2)
            
            with col1:
                export_format = st.selectbox(
                    "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
                    options=["Excel (.xlsx)", "PDF –æ—Ç—á–µ—Ç", "JSON –¥–∞–Ω–Ω—ã–µ"],
                    key="export_format"
                )
            
            with col2:
                include_charts = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True, key="include_charts")
            
            export_sections = st.multiselect(
                "–†–∞–∑–¥–µ–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                options=[
                    "–ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥",
                    "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", 
                    "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤",
                    "–¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
                    "–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤",
                    "–†–µ–∫–ª–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                ],
                default=["–ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä–∏–Ω–≥"],
                key="export_sections"
            )
            
            col_cancel, col_export = st.columns(2)
            
            with col_cancel:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                    st.session_state.show_export_modal = False
                    st.rerun()
            
            with col_export:
                if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, type="primary"):
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    st.success("–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—á–∞—Ç! –§–∞–π–ª –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
                    st.session_state.show_export_modal = False
                    st.rerun()
